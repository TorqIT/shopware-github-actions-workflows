# Builds, tags, and pushes Shopware Docker images to an Azure Container Registry, applies Azure infrastrcuture changes, and deploys new revisions to Container Apps.
# This workflow assumes an architecture similar to the one in https://github.com/TorqIT/shopware-azure-provisioning - namely, an Azure Container Registry, an init Container App Job, a PHP Container App, and a supervisord Container App.
#
# Invoke this workflow in your project's workflow as follows:
# on:
#   push:
#     branches: [main, develop]
# jobs:
#   deploy-to-azure-container-apps:
#     uses: TorqIT/shopware-github-actions-workflows/.github/workflows/deploy-to-azure-container-apps.yml@v8
#     permissions:
#       contents: read
#       actions: read
#     with:
#       ENVIRONMENT: ${{ github.ref_name == 'main' && 'production' || 'test' }}
#     secrets:
#       SERVICE_PRINCIPAL_ID: ${{ secrets.SERVICE_PRINCIPAL_ID }}
#       SERVICE_PRINCIPAL_PASSWORD: ${{ secrets.SERVICE_PRINCIPAL_PASSWORD }}
#
# The GitHub Environments you use with this workflow will need the following variables:
# - AZURE_TENANT_ID
#     description: ID of the Azure tenant to deploy to
#     required: true
# - AZURE_SUBSCRIPTION_ID
#     description: ID of the Azure subscription to deploy to
#     required: true
# - RESOURCE_GROUP
#     description: Name of the Azure Resource Group to deploy to
#     required: true
# - CONTAINER_REGISTRY
#     description: Name of the Azure Container Registry to deploy to. This should be the fully qualified name - e.g. myregistry.azurecr.io
#     required: true
# - INIT_IMAGE
#     description: Name of the init Docker image to push to the registry
#     required: false
#     default value: init
# - INIT_CONTAINER_NAME
#     description: Name of the container inside the init Container App Job
#     required: false
#     default value: init
# - INIT_CONTAINER_APP_JOB
#     description: Name of the init Container App Job
#     required: true
# - PHP_IMAGE
#     description: Name of the PHP Docker image to push to the registry
#     required: false
#     default value: php
# - PHP_CONTAINER_APP
#     description: Name of the PHP Container App
#     required: true
# - SUPERVISORD_IMAGE
#     description: Name of the supervisord Docker image to push to the registry
#     required: false
#     default value: supervisord
# - SUPERVISORD_CONTAINER_APP
#     description: Name of the supervisord Container App
#     required: true
# - AZURE_PARAMETERS_FILE
#     description: Name of the Azure parameters file to use to deploy infrastructure changes. Will be assumed to be located in the directory defined by the AZURE_DIRECTORY input.
#     required: false
#     default: parameters.ENVIRONMENT.json
#

name: Azure Container Apps Deployment

on:
  workflow_call:
    inputs:
      ENVIRONMENT:
        required: true
        type: string
        description: "The GitHub Environment in which to run the workflow"
      RUNNER:
        required: false
        type: string
        description: Optional self-hosted runner for this workflow (see https://github.com/TorqIT/shopware-github-actions-workflows#self-hosted-runners)
      SUBMODULES:
        required: false
        type: boolean
        default: false
        description: "Whether to clone submodules when cloning the project repository"
      AZURE_CD_PATH:
        required: false
        type: string
        description: "(Optional) path (relative to the project's root) containing config files to be copied when running deployment. Will be copied from $AZURE_CD_PATH/config/* to $SHOPWARE_ROOT/config/*"
      PHP_VERSION:
        required: false
        type: string
        default: "8.3"
        description: "PHP version to use when running Composer directly"
      SHOPWARE_ROOT:
        required: false
        type: string
        default: "."
        description: "The path (relative to the project's root) where the Shopware files are stored (config, src, etc.)"
      DOCKERFILE_PATH:
        required: false
        type: string
        default: ".docker/Dockerfile"
        description: "The path (relative to the project's root) of the Dockerfile used to build the init image"
      INIT_DOCKER_TARGET:
        required: false
        type: string
        default: "init"
        description: "The Docker target to use when building the init image"
      PHP_DOCKERFILE:
        required: false
        type: string
        default: ".docker/Dockerfile"
        description: "The path (relative to the project's root) of the Dockerfile used to build the PHP image"
      PHP_DOCKER_TARGET:
        required: false
        type: string
        default: "php"
        description: "The Docker target to use when building the PHP image"
      SUPERVISORD_DOCKERFILE:
        required: false
        type: string
        default: ".docker/Dockerfile"
        description: "The path (relative to the project's root) of the Dockerfile used to build the supervisord image"
      SUPERVISORD_TARGET:
        required: false
        type: string
        default: "supervisord"
        description: "The Docker target to use when building the supervisord image"
      AZURE_DIRECTORY:
        required: false
        type: string
        default: ".azure"
        description: "The path (relative to the project's root) of the directory containing the project's Azure parameter files"
      AZURE_IMAGE_TAG:
        required: false
        type: string
        default: "2"
        description: "Tag to use when pulling the TORQ Azure provisioning image (https://github.com/TorqIT/shopware-azure-provisioning)"

    secrets:
      SERVICE_PRINCIPAL_ID:
        required: true
        description: The ID of the Service Principal in Azure that will be used to deploy. The Service Principal must have permission to push images to the Container Registry and to deploy new revisions to the init, PHP and supervisord Container Apps.
      SERVICE_PRINCIPAL_PASSWORD:
        required: true
        description: The password for the Service Principal in Azure
      SHOPWARE_COMPOSER_TOKEN:
        required: true
        description: The value of your project's Shopware Composer token
      SLACK_WORKFLOW_STATUS_WEBHOOK_URL:
        required: false
        description: (Optional) Slack webhook URL to send workflow results to

jobs:
  build-and-push-images-and-run-init:
    name: Build and push Shopware Docker images, and run init job
    runs-on: ${{ inputs.RUNNER || 'ubuntu-latest' }}
    environment: ${{ inputs.ENVIRONMENT }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: ${{ inputs.SUBMODULES }}
          fetch-depth: 0

      - name: Get workflow version
        id: workflow-version
        uses: canonical/get-workflow-version-action@v1
        with:
          repository-name: TorqIT/shopware-github-actions-workflows
          file-name: deploy-to-azure-container-apps.yml
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout workflow repository to use composite actions
        uses: actions/checkout@v4
        with:
          repository: TorqIT/shopware-github-actions-workflows
          ref: ${{ steps.workflow-version.outputs.sha }}
          path: reusable-workflow
          fetch-depth: 1

      - name: Copy config files required for running in Azure
        uses: ./reusable-workflow/.github/actions/azure-container-apps-copy-config
        with:
          SHOPWARE_ROOT: ${{ inputs.SHOPWARE_ROOT }}
          CD_PATH: ${{ inputs.AZURE_CD_PATH }}

      - name: Replace local Composer dependencies with their remote counterparts
        uses: ./reusable-workflow/.github/actions/replace-local-composer-dependencies
        with:
          PHP_VERSION: ${{ inputs.PHP_VERSION }}
          SHOPWARE_ROOT: ${{ inputs.SHOPWARE_ROOT }}
          SHOPWARE_COMPOSER_TOKEN: ${{ secrets.SHOPWARE_COMPOSER_TOKEN }}

      - name: Set up Docker
        uses: ./reusable-workflow/.github/actions/setup-docker
        with:
          CONTAINER_REGISTRY: ${{ vars.CONTAINER_REGISTRY }}
          CONTAINER_REGISTRY_USERNAME: ${{ secrets.SERVICE_PRINCIPAL_ID }}
          CONTAINER_REGISTRY_PASSWORD: ${{ secrets.SERVICE_PRINCIPAL_PASSWORD }}

      - name: Apply Azure infrastructure changes
        uses: ./reusable-workflow/.github/actions/azure-apply-infra-changes
        with:
          SERVICE_PRINCIPAL_ID: ${{ secrets.SERVICE_PRINCIPAL_ID }}
          SERVICE_PRINCIPAL_PASSWORD: ${{ secrets.SERVICE_PRINCIPAL_PASSWORD }}
          TENANT: ${{ vars.AZURE_TENANT_ID }}
          AZURE_DIRECTORY: ${{ inputs.AZURE_DIRECTORY }}
          AZURE_IMAGE_TAG: ${{ inputs.AZURE_IMAGE_TAG }}
          AZURE_PARAMETERS_FILE: ${{ vars.AZURE_PARAMETERS_FILE }}

      - name: Build and push init image
        uses: ./reusable-workflow/.github/actions/build-and-push-shopware-image
        with:
          DOCKERFILE_PATH: ${{ inputs.DOCKERFILE_PATH }}
          DOCKERFILE_TARGET: init
          CONTAINER_REGISTRY: ${{ vars.CONTAINER_REGISTRY }}
          IMAGE: ${{ vars.INIT_IMAGE || 'init' }}
          SHOPWARE_COMPOSER_TOKEN: ${{ secrets.SHOPWARE_COMPOSER_TOKEN }}
          CACHE_FROM: type=gha
          CACHE_TO: type=gha,mode=min
          TAGS: |
            ${{ vars.CONTAINER_REGISTRY }}/${{ vars.INIT_IMAGE || 'init' }}:latest,
            ${{ vars.CONTAINER_REGISTRY }}/${{ vars.INIT_IMAGE || 'init' }}:${{ github.run_id }}

      - name: Build and push PHP image
        uses: ./reusable-workflow/.github/actions/build-and-push-shopware-image
        with:
          DOCKERFILE_PATH: ${{ inputs.DOCKERFILE_PATH }}
          DOCKERFILE_TARGET: php
          CONTAINER_REGISTRY: ${{ vars.CONTAINER_REGISTRY }}
          IMAGE: ${{ vars.PHP_IMAGE || 'php' }}
          SHOPWARE_COMPOSER_TOKEN: ${{ secrets.SHOPWARE_COMPOSER_TOKEN }}
          TAGS: |
            ${{ vars.CONTAINER_REGISTRY }}/${{ vars.PHP_IMAGE || 'php' }}:latest,
            ${{ vars.CONTAINER_REGISTRY }}/${{ vars.PHP_IMAGE || 'php' }}:${{ github.run_id }}

      - name: Build and push supervisord image
        uses: ./reusable-workflow/.github/actions/build-and-push-shopware-image
        with:
          DOCKERFILE_PATH: ${{ inputs.DOCKERFILE_PATH }}
          DOCKERFILE_TARGET: supervisord
          CONTAINER_REGISTRY: ${{ vars.CONTAINER_REGISTRY }}
          IMAGE: ${{ vars.SUPERVISORD_IMAGE || 'supervisord' }}
          SHOPWARE_COMPOSER_TOKEN: ${{ secrets.SHOPWARE_COMPOSER_TOKEN }}
          TAGS: |
            ${{ vars.CONTAINER_REGISTRY }}/${{ vars.SUPERVISORD_IMAGE || 'supervisord' }}:latest,
            ${{ vars.CONTAINER_REGISTRY }}/${{ vars.SUPERVISORD_IMAGE || 'supervisord' }}:${{ github.run_id }}

      - name: Deploy and run init Container App Job
        uses: ./reusable-workflow/.github/actions/azure-container-apps-deploy-and-run-init
        timeout-minutes: 15 # as there is a (low to zero) chance of an infinite loop in this action, set a timeout just in case
        with:
          SERVICE_PRINCIPAL_ID: ${{ secrets.SERVICE_PRINCIPAL_ID }}
          SERVICE_PRINCIPAL_PASSWORD: ${{ secrets.SERVICE_PRINCIPAL_PASSWORD }}
          TENANT: ${{ vars.AZURE_TENANT_ID }}
          SUBSCRIPTION: ${{ vars.AZURE_SUBSCRIPTION_ID }}
          INIT_IMAGE: ${{ vars.INIT_IMAGE || 'init' }}
          INIT_CONTAINER_NAME: ${{ vars.INIT_CONTAINER_NAME || 'init' }}
          INIT_CONTAINER_APP_JOB: ${{ vars.INIT_CONTAINER_APP_JOB }}
          RESOURCE_GROUP: ${{ vars.RESOURCE_GROUP }}
          CONTAINER_REGISTRY: ${{ vars.CONTAINER_REGISTRY }}
    
  deploy-php-container-app-revision:
    name: Deploy new revision of PHP Container App
    runs-on: ${{ inputs.RUNNER || 'ubuntu-latest' }}
    environment: ${{ inputs.ENVIRONMENT }}
    needs:
      - build-and-push-images-and-run-init
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get workflow version
        id: workflow-version
        uses: canonical/get-workflow-version-action@v1
        with:
          repository-name: TorqIT/shopware-github-actions-workflows
          file-name: deploy-to-azure-container-apps.yml
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout workflow repository to use composite actions
        uses: actions/checkout@v4
        with:
          repository: TorqIT/shopware-github-actions-workflows
          ref: ${{ steps.workflow-version.outputs.sha }}
          path: reusable-workflow
          fetch-depth: 1

      - name: Deploy new revision of Container App
        uses: ./reusable-workflow/.github/actions/azure-container-apps-deploy-revision
        with:
          SERVICE_PRINCIPAL_ID: ${{ secrets.SERVICE_PRINCIPAL_ID }}
          SERVICE_PRINCIPAL_PASSWORD: ${{ secrets.SERVICE_PRINCIPAL_PASSWORD }}
          TENANT: ${{ vars.AZURE_TENANT_ID }}
          SUBSCRIPTION: ${{ vars.AZURE_SUBSCRIPTION_ID }}
          RESOURCE_GROUP: ${{ vars.RESOURCE_GROUP }}
          CONTAINER_REGISTRY: ${{ vars.CONTAINER_REGISTRY }}
          CONTAINER_APP: ${{ vars.PHP_CONTAINER_APP }}
          IMAGE: ${{ vars.PHP_IMAGE || 'php' }}
          MULTI_REVISION: "true"

  # TODO using a matrix to de-duplicate these two jobs does not seem possible as we are using the "vars" context, which matrices seem to be unable to access (inputs appear empty)
  deploy-supervisord-container-app-revision:
    name: Deploy new revision of supervisord Container App
    runs-on: ${{ inputs.RUNNER || 'ubuntu-latest' }}
    environment: ${{ inputs.ENVIRONMENT }}
    needs:
      - build-and-push-images-and-run-init
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get workflow version
        id: workflow-version
        uses: canonical/get-workflow-version-action@v1
        with:
          repository-name: TorqIT/shopware-github-actions-workflows
          file-name: deploy-to-azure-container-apps.yml
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout workflow repository to use composite actions
        uses: actions/checkout@v4
        with:
          repository: TorqIT/shopware-github-actions-workflows
          ref: ${{ steps.workflow-version.outputs.sha }}
          path: reusable-workflow
          fetch-depth: 1

      - name: Deploy new revision of Container App
        uses: ./reusable-workflow/.github/actions/azure-container-apps-deploy-revision
        with:
          SERVICE_PRINCIPAL_ID: ${{ secrets.SERVICE_PRINCIPAL_ID }}
          SERVICE_PRINCIPAL_PASSWORD: ${{ secrets.SERVICE_PRINCIPAL_PASSWORD }}
          TENANT: ${{ vars.AZURE_TENANT_ID }}
          SUBSCRIPTION: ${{ vars.AZURE_SUBSCRIPTION_ID }}
          RESOURCE_GROUP: ${{ vars.RESOURCE_GROUP }}
          CONTAINER_REGISTRY: ${{ vars.CONTAINER_REGISTRY }}
          CONTAINER_APP: ${{ vars.SUPERVISORD_CONTAINER_APP }}
          IMAGE: ${{ vars.SUPERVISORD_IMAGE || 'supervisord' }}

  workflow-failure-notification:
    name: Send workflow failure notification to Slack channel
    runs-on: ${{ inputs.RUNNER || 'ubuntu-latest' }}
    environment: ${{ inputs.ENVIRONMENT }}
    if: failure()
    needs:
      - build-and-push-images-and-run-init
      - deploy-php-container-app-revision
      - deploy-supervisord-container-app-revision
    steps:
      - id: check-webhook-url
        # Hacky workaround to get around the fact that we cannot reference secrets in a conditional
        run: |
          if [ "${{ secrets.SLACK_WORKFLOW_STATUS_WEBHOOK_URL }}" != '' ]; then
            echo "Slack webhook URL is defined"
            echo "slackWebhookDefined=true" >> $GITHUB_OUTPUT;
          else
            echo "Slack webhook URL is not defined"
            echo "slackWebhookDefined=false" >> $GITHUB_OUTPUT;
          fi

      - name: Send job status to Slack
        uses: slackapi/slack-github-action@v2
        if: steps.check-webhook-url.outputs.slackWebhookDefined == 'true'
        with:
          webhook: ${{ secrets.SLACK_WORKFLOW_STATUS_WEBHOOK_URL }}
          webhook-type: incoming-webhook
          payload: |
            text: "*GitHub deployment failure*"
            blocks:
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: "*Azure Container Apps deployment to ${{ inputs.ENVIRONMENT }} for ${{ github.repository }}* failed :x:\n\n${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
