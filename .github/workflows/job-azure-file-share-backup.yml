# Creates a snapshot of an Azure NFS File Share
#
# Invoke this workflow in your project's workflow as follows (example below triggers the workflow once per month):
# on:
#   schedule:
#     - cron: "0 0 1 * *" 
# jobs:
#   file-share-backup:
#     uses: TorqIT/shopware-github-actions-workflows/.github/workflows/job-azure-file-share-backup.yml@v8
#     permissions:
#       contents: read
#       actions: read
#     with:
#       ENVIRONMENT: production
#     secrets:
#       SERVICE_PRINCIPAL_ID: ${{ secrets.SERVICE_PRINCIPAL_ID }}
#       SERVICE_PRINCIPAL_PASSWORD: ${{ secrets.SERVICE_PRINCIPAL_PASSWORD }}
#       SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
#
# The GitHub Environments you use with this workflow will need the following variables:
# - AZURE_TENANT_ID
#     description: ID of the Azure tenant to deploy to
#     required: true
# - AZURE_SUBSCRIPTION_ID
#     description: ID of the Azure subscription to deploy to
#     required: true
# - AZURE_FILES_STORAGE_ACCOUNT
#     description: Name of the Storage Account containing the File Share to be backed up
#     required: true
# - AZURE_BACKUP_FILE_SHARE_NAME
#     description: Name of the File Share to back up
#     required: true
# - RESOURCE_GROUP
#     description: Name of the Resource Group that hosts the server
#     required: true
#

name: Azure NFS File Share Backup

on:
  workflow_call:
    inputs:
      RUNNER:
        required: false
        type: string
        description: Optional self-hosted runner for this workflow (see https://github.com/TorqIT/shopware-github-actions-workflows#self-hosted-runners)
      ENVIRONMENT:
        required: true
        type: string

    secrets:
      SERVICE_PRINCIPAL_ID:
        required: true
        description: The ID of the Service Principal in Azure that will be used to deploy. The Service Principal must have permission to update settings on the Storage Account and to create snapshots of File Shares.
      SERVICE_PRINCIPAL_PASSWORD:
        required: true
        description: The password for the Service Principal in Azure
      SLACK_WEBHOOK_URL:
        required: true
        description: Webhook URL to send job status messages to

jobs:
  back-up-file-share:
    name: Create a snapshot of an Azure NFS File Share
    runs-on: ${{ inputs.RUNNER || 'ubuntu-latest' }}
    environment: ${{ inputs.ENVIRONMENT }}
    steps:
      - name: Get workflow version
        id: workflow-version
        uses: canonical/get-workflow-version-action@v1
        with:
          repository-name: TorqIT/shopware-github-actions-workflows
          file-name: job-azure-file-share-backup.yml
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout workflow repository to use composite actions
        uses: actions/checkout@v4
        with:
          repository: TorqIT/shopware-github-actions-workflows
          ref: ${{ steps.workflow-version.outputs.sha }}
          path: reusable-workflow
          fetch-depth: 1

      - name: Log in to Azure
        uses: ./reusable-workflow/.github/actions/azure-login
        with:
          SERVICE_PRINCIPAL_ID: ${{ secrets.SERVICE_PRINCIPAL_ID }}
          SERVICE_PRINCIPAL_PASSWORD: ${{ secrets.SERVICE_PRINCIPAL_PASSWORD }}
          TENANT: ${{ vars.AZURE_TENANT_ID }}
          SUBSCRIPTION: ${{ vars.AZURE_SUBSCRIPTION_ID }}
      
      - name: Add temporary network rule for this runner to Storage Account firewall
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -e
            runnerIp=$(curl ipinfo.io/ip)
            az storage account network-rule add \
              --resource-group ${{ vars.RESOURCE_GROUP }} \
              --account-name ${{ vars.AZURE_FILES_STORAGE_ACCOUNT }} \
              --ip-address $runnerIp \
              --verbose
            echo "Sleep for 180 seconds to allow network rule to propagate to Storage Account..."
            sleep 180

      - name: Create a snapshot of the File Share
        id: snapshot
        run: |
          set -e
          snapshotResult=$(az storage share snapshot --name ${{ vars.AZURE_BACKUP_FILE_SHARE_NAME }} --account-name ${{ vars.AZURE_FILES_STORAGE_ACCOUNT }})
          snapshotName=$(echo $snapshotResult | jq -r '.snapshot')
          echo "snapshotName=$snapshotName" >> $GITHUB_OUTPUT

      - name: Remove temporary network rule from Storage Account firewall
        if: always()
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -e
            runnerIp=$(curl ipinfo.io/ip)
            az storage account network-rule remove \
              --resource-group ${{ vars.RESOURCE_GROUP }} \
              --account-name ${{ vars.AZURE_FILES_STORAGE_ACCOUNT }} \
              --ip-address $runnerIp

      - name: Send job status to Slack
        if: always()
        uses: slackapi/slack-github-action@v2
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          webhook-type: incoming-webhook
          payload: |
            text: "*Azure NFS File Share Backup Job*"
            blocks:
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: "*Azure NFS File Share backup job for ${{ github.repository }}*: ${{ job.status == 'success' && 'Success! :white_check_mark:' || 'Failed :x:' }}\n\nSnapshot *${{ steps.snapshot.outputs.snapshotName }}* created\n\n${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          