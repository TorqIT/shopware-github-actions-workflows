name: Build, tag, and push Docker images, and deploy to Azure Container Apps

on:
  workflow_call:
    inputs:
      RUNNER:
        required: false
        type: string
      ENVIRONMENT:
        required: true
        type: string
      SUBMODULES:
        required: false
        type: boolean
        default: false
      SHOPWARE_ROOT:
        required: false
        type: string
        default: "src"
      DOCKERFILE_PATH:
        required: false
        type: string
        default: ".docker/Dockerfile"
      CI_PATH:
        required: true
        type: string
      SHOPWARE_WEB_TARGET:
        required: false
        type: string
        default: "web"
      DEPLOY_SUPERVISORD:
        required: false
        type: boolean
        default: false

    secrets:
      SERVICE_PRINCIPAL_PASSWORD:
        required: true
      DATABASE_PASSWORD:
        required: false
        description: "DEPRECATED"
      AZURE_STORAGE_ACCOUNT_KEY:
        required: false
        description: "DEPRECATED"
      SHOPWARE_COMPOSER_TOKEN:
        required: false
      TORQ_GITHUB_TOKEN:
        required: false
      RECAPTCHA_CLIENT_KEY:
        required: false

jobs:
  run-init-job:
    runs-on: ${{ inputs.RUNNER || 'ubuntu-latest' }}
    environment: ${{ inputs.ENVIRONMENT }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Copy relevant files for deploy
        run: |
          cp -r ${{ inputs.CI_PATH }}/. ${{ inputs.SHOPWARE_ROOT }}

      - name: Log in to Azure Container Registry ${{ vars.CONTAINER_REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.CONTAINER_REGISTRY }}
          username: "${{ vars.SERVICE_PRINCIPAL_ID }}"
          password: "${{ secrets.SERVICE_PRINCIPAL_PASSWORD }}"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Shopware init image
        uses: docker/build-push-action@v6
        with:
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          no-cache: true
          file: ${{ inputs.DOCKERFILE_PATH }}
          context: .
          target: init
          build-args: |
            SHOPWARE_COMPOSER_TOKEN=${{ secrets.SHOPWARE_COMPOSER_TOKEN }}
          secrets: |
            shopware-composer-token=${{ secrets.SHOPWARE_COMPOSER_TOKEN }}
          tags:
            ${{ vars.CONTAINER_REGISTRY }}/${{ vars.SHOPWARE_INIT_IMAGE }}:latest,
            ${{ vars.CONTAINER_REGISTRY }}/${{ vars.SHOPWARE_INIT_IMAGE }}:${{ github.run_id }}

      - name: Log into Azure CLI
        run: |
          echo Logging into Azure...
          az login \
            --tenant ${{ vars.TENANT }} \
            --service-principal \
            --username '${{ vars.SERVICE_PRINCIPAL_ID }}' \
            --password '${{ secrets.SERVICE_PRINCIPAL_PASSWORD }}'

      - name: Install Azure CLI containerapp extension
        run: |
          az config set extension.use_dynamic_install=yes_without_prompt
          az extension add --name containerapp

      - name: Run Shopware init Container App Job
        id: run-init
        run: |
          echo Creating new revision of ${{ vars.INIT_CONTAINER_APP_JOB }} Container App Job
          az containerapp job update \
            --resource-group ${{ vars.RESOURCE_GROUP }} \
            --name ${{ vars.INIT_CONTAINER_APP_JOB }} \
            --image ${{ vars.CONTAINER_REGISTRY }}/${{ vars.SHOPWARE_INIT_IMAGE }}:${{ github.run_id }}

          echo Running Shopware init Container App Job...
          az containerapp job start \
            --resource-group ${{ vars.RESOURCE_GROUP }} \
            --name ${{ vars.INIT_CONTAINER_APP_JOB }}

          executionName=$(az containerapp job execution list \
            --resource-group ${{ vars.RESOURCE_GROUP }} \
            --name ${{ vars.INIT_CONTAINER_APP_JOB }} \
            | jq -r '.[] | select(.properties.status | contains("Running")) | .name')
          echo "EXECUTION_NAME=$executionName" >> $GITHUB_OUTPUT
          echo Waiting for $executionName to finish...

          executionStatus=$(az containerapp job execution list \
            --resource-group ${{ vars.RESOURCE_GROUP }} \
            --name ${{ vars.INIT_CONTAINER_APP_JOB }} \
            | jq -r --arg executionName $executionName '.[] | select(.name==$executionName) | .properties.status')
          while [[ "$executionStatus" == "Running" ]]
          do
            echo Job execution $executionName is still running...
            sleep 5
            executionStatus=$(az containerapp job execution list \
              --resource-group ${{ vars.RESOURCE_GROUP }} \
              --name ${{ vars.INIT_CONTAINER_APP_JOB }} \
              | jq -r --arg executionName $executionName '.[] | select(.name==$executionName) | .properties.status')
          done

          if [[ "$executionStatus" == "Succeeded" ]]
          then
            echo "Execution $executionName succeeded!"
          else
            echo "Execution $executionName failed!"
            exit 1
          fi

      # - name: Stop execution
      #   uses: azure/cli@v2
      #   with:
      #     azcliversion: latest
      #     inlineScript: |
      #       echo Stopping execution ${{ steps.run-init.outputs.EXECUTION_NAME }}
      #       az containerapp job stop \
      #         --resource-group ${{ vars.RESOURCE_GROUP }} \
      #         --name ${{ vars.INIT_CONTAINER_APP_JOB }} \
      #         --job-execution-name ${{ steps.run-init.outputs.EXECUTION_NAME }}

  build-and-deploy-php:
    runs-on: ${{ inputs.RUNNER || 'ubuntu-latest' }}
    environment: ${{ inputs.ENVIRONMENT }}
    needs:
      - run-init-job
    if: always()

    steps:
      # This is a workaround for the fact there is no way to do a conditional "needs"
      - name: Fail fast if necessary jobs failed
        if: ${{ needs.run-init-job.result == 'failure' || needs.run-init-job.result == 'cancelled' }}
        run: exit 1

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: ${{ inputs.SUBMODULES }}

      - name: Copy relevant files for deploy
        run: |
          cp -r ${{ inputs.CI_PATH }}/. ${{ inputs.SHOPWARE_ROOT }}

      - name: Log in to Azure Container Registry ${{ vars.CONTAINER_REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.CONTAINER_REGISTRY }}
          username: "${{ secrets.SERVICE_PRINCIPAL_ID }}"
          password: "${{ secrets.SERVICE_PRINCIPAL_PASSWORD }}"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push PHP image
        uses: docker/build-push-action@v6
        with:
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          file: ${{ inputs.DOCKERFILE_PATH }}
          context: .
          target: ${{ vars.SHOPWARE_WEB_TARGET }}
          build-args: |
            SHOPWARE_COMPOSER_TOKEN=${{ secrets.SHOPWARE_COMPOSER_TOKEN }}
          tags:
            ${{ vars.CONTAINER_REGISTRY }}/${{ vars.SHOPWARE_WEB_IMAGE }}:latest,
            ${{ vars.CONTAINER_REGISTRY }}/${{ vars.SHOPWARE_WEB_IMAGE }}:${{ github.run_id }}

      - name: Create new revision of PHP Container App
        run: |
          echo Creating new revision of Shopware container...
          az containerapp revision copy \
            --resource-group ${{ vars.RESOURCE_GROUP }} \
            --name ${{ vars.SHOPWARE_WEB_CONTAINER_APP }} \
            --image ${{ vars.CONTAINER_REGISTRY }}/${{ vars.SHOPWARE_WEB_IMAGE }}:${{ github.run_id }} \
            --revision-suffix run-${{ github.run_id }}
          echo Ensuring 100% of traffic is set to the latest revision...
          az containerapp ingress traffic set \
            --resource-group ${{ vars.RESOURCE_GROUP }} \
            --name ${{ vars.SHOPWARE_WEB_CONTAINER_APP }} \
            --revision-weight latest=100

  build-and-deploy-supervisord:
    runs-on: ${{ inputs.RUNNER || 'ubuntu-latest' }}
    environment: ${{ inputs.ENVIRONMENT }}
    needs:
      - run-init-job
    if: ${{ inputs.DEPLOY_SUPERVISORD }}

    steps:
      # This is a workaround for the fact there is no way to do a conditional "needs"
      - name: Fail fast if necessary jobs failed
        if: ${{ needs.run-init-job.result == 'failure' || needs.run-init-job.result == 'cancelled' }}
        run: exit 1

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: ${{ inputs.SUBMODULES }}

      - name: Copy relevant files for deploy
        run: |
          cp -r ${{ inputs.CI_PATH }}/. ${{ inputs.SHOPWARE_ROOT }}

      - name: Log in to Azure Container Registry ${{ vars.CONTAINER_REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.CONTAINER_REGISTRY }}
          username: "${{ secrets.SERVICE_PRINCIPAL_ID }}"
          password: "${{ secrets.SERVICE_PRINCIPAL_PASSWORD }}"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push PHP image
        uses: docker/build-push-action@v6
        with:
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          file: ${{ inputs.DOCKERFILE_PATH }}
          context: .
          target: supervisord
          build-args: |
            SHOPWARE_COMPOSER_TOKEN=${{ secrets.SHOPWARE_COMPOSER_TOKEN }}
          tags:
            ${{ vars.CONTAINER_REGISTRY }}/${{ vars.SUPERVISORD_IMAGE }}:latest,
            ${{ vars.CONTAINER_REGISTRY }}/${{ vars.SUPERVISORD_IMAGE }}:${{ github.run_id }}

      - name: Create new revision of supervisord Container App
        run: |
          echo Creating new revision of supervisord container...
          az containerapp revision copy \
            --resource-group ${{ vars.RESOURCE_GROUP }} \
            --name ${{ vars.SHOPWARE_WEB_CONTAINER_APP }} \
            --image ${{ vars.CONTAINER_REGISTRY }}/${{ vars.SUPERVISORD_IMAGE }}:${{ github.run_id }} \
            --revision-suffix run-${{ github.run_id }}